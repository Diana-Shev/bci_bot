#—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞. –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª, –ø–∞—Ä—Å–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, –≤—ã–∑—ã–≤–∞–µ—Ç LLM (–∏–ª–∏ –º–æ–∫) –∏ –æ—Ç–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
import json
from pathlib import Path
from datetime import datetime
import pandas as pd

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

from .config import settings
from .database import AsyncSessionLocal
from .crud import (
    get_or_create_user, save_metrics_bulk, save_productivity_periods,
    get_productivity_periods, get_user_metrics, save_day_plan, save_improvement_suggestions,
    update_user_iaf
)
from .utils import parse_metrics_file, build_prompt_for_llm
from .llm_client import analyze_metrics

DOWNLOAD_DIR = Path(settings.DOWNLOADS_DIR)
DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    tg_id = update.effective_user.id
    name = update.effective_user.full_name
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await get_or_create_user(session, telegram_id=tg_id, name=name)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[tg_id] = "welcome"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í–≤–µ–¥–∏ —Å–≤–æ–∏ IAF"
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–≤–µ–¥–∏ —Å–≤–æ–∏ IAF", callback_data="input_iaf")]
    ])
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥—ã—Ö–∞",
        reply_markup=keyboard
    )

async def cb_input_iaf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ–¥–∏ —Å–≤–æ–∏ IAF'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    user_states[tg_id] = "waiting_iaf"
    
    await query.edit_message_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∞–ª—å—Ñ–∞-—á–∞—Å—Ç–æ—Ç—É (IAF) –≤ –ì—Ü.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 10.5 –∏–ª–∏ 11.2\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
    )

async def handle_iaf_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ IAF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not update.message or not update.message.text:
        return
    
    tg_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è IAF
    if user_states.get(tg_id) != "waiting_iaf":
        return
    
    try:
        iaf = float(update.message.text.replace(',', '.'))
        if iaf < 7.0 or iaf > 14.0:
            await update.message.reply_text(
                "IAF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 7-14 –ì—Ü. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 10.5"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IAF –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await update_user_iaf(session, tg_id, iaf)
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    user_states[tg_id] = "ready_for_file"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏", callback_data="upload_file")]
    ])
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π IAF: {iaf} –ì—Ü\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (CSV –∏–ª–∏ XLSX)",
        reply_markup=keyboard
    )

async def cb_upload_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    user_states[tg_id] = "waiting_file"
    
    await query.edit_message_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (CSV –∏–ª–∏ XLSX).\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:\n"
        "‚Ä¢ timestamp - –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ cognitive_score - –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —Å–∫–æ—Ä\n"
        "‚Ä¢ focus - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ chill - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ stress - —Å—Ç—Ä–µ—Å—Å\n"
        "‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏..."
    )

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not update.message or not update.message.document:
        return
    
    tg_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    if user_states.get(tg_id) != "waiting_file":
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏'")
        return
    
    doc = update.message.document
    name = update.effective_user.full_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not doc.file_name.lower().endswith(('.csv', '.xlsx')):
        await update.message.reply_text("–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã CSV –∏ XLSX")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    saved_path = DOWNLOAD_DIR / f"{tg_id}_{doc.file_name}"
    file = await doc.get_file()
    await file.download_to_drive(str(saved_path))
    
    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü–∞—Ä—Å—é...")

    try:
        rows = parse_metrics_file(str(saved_path))
        if not rows:
            await update.message.reply_text("–í —Ñ–∞–π–ª–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏.")
            return
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {e}")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=name)
        n = await save_metrics_bulk(session, user.user_id, rows)

    await update.message.reply_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {n} —Å—Ç—Ä–æ–∫ –º–µ—Ç—Ä–∏–∫. –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ LLM
    prompt = build_prompt_for_llm(user_name=name, metrics_rows=rows,
                                 instruction="Identify hourly productivity and rest periods. Suggest a daily plan. Return strict JSON.")
    try:
        raw = await analyze_metrics(prompt)
        data = json.loads(raw)
    except Exception as e:
        await update.message.reply_text("LLM –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –æ—Ç–≤–µ—Ç. –°—ã—Ä–æ–π —Ç–µ–∫—Å—Ç:\n" + str(raw))
        return

    periods = data.get("productivity_periods", []) or []
    day_plan = data.get("day_plan", "") or ""
    suggestions = data.get("improvement_suggestions", []) or []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await save_productivity_periods(session, user.user_id, periods)

    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[tg_id] = "analysis_complete"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="download_csv")],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è", callback_data="get_recommendations")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])

    preview = "\n".join([f"{p.get('start_time','?')}‚Äì{p.get('end_time','?')}: {p.get('recommended_activity','')}" for p in periods[:5]]) or "LLM –Ω–µ –Ω–∞—à—ë–ª —è–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."
    msg = f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤.\n\n–ü—Ä–µ–≤—å—é:\n{preview}"
    if day_plan:
        msg += f"\n\n–ü–ª–∞–Ω –¥–Ω—è:\n{day_plan}"
    if suggestions:
        msg += "\n\n–ü—Ä–∏–º–µ—Ä —Å–æ–≤–µ—Ç–æ–≤:\n- " + "\n- ".join(suggestions[:3])

    await update.message.reply_text(msg, reply_markup=keyboard)

async def cb_download_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=query.from_user.full_name)
        periods = await get_productivity_periods(session, user.user_id)
    
    if not periods:
        await query.edit_message_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º CSV —Ñ–∞–π–ª
    df = pd.DataFrame([{
        "start_time": p.start_time.strftime("%H:%M") if p.start_time else "",
        "end_time": p.end_time.strftime("%H:%M") if p.end_time else "",
        "recommended_activity": p.recommended_activity or ""
    } for p in periods])
    
    out_path = DOWNLOAD_DIR / f"{tg_id}_periods.csv"
    df.to_csv(out_path, index=False)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(out_path, "rb") as f:
        await context.bot.send_document(chat_id=tg_id, document=f)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è", callback_data="get_recommendations")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    
    await query.message.reply_text(
        "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è.",
        reply_markup=keyboard
    )

async def cb_get_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=query.from_user.full_name)
        metrics = await get_user_metrics(session, user.user_id)
    
    if not metrics:
        await query.edit_message_text("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    rows = []
    for m in metrics[:120]:
        rows.append({
            "timestamp": m.timestamp,
            "cognitive_score": m.cognitive_score,
            "focus": m.focus,
            "chill": m.chill,
            "stress": m.stress,
            "self_control": m.self_control,
            "anger": m.anger,
            "relaxation_index": m.relaxation_index,
            "concentration_index": m.concentration_index,
            "fatique_score": m.fatique_score,
            "reverse_fatique": m.reverse_fatique,
            "alpha_gravity": m.alpha_gravity,
            "heart_rate": m.heart_rate,
        })
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç LLM
    prompt = build_prompt_for_llm(
        user_name=query.from_user.full_name, 
        metrics_rows=rows,
        instruction="Return ONLY JSON with key 'day_plan' (string). Give specific daily schedule recommendations based on the metrics."
    )
    
    try:
        raw = await analyze_metrics(prompt)
        data = json.loads(raw)
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ LLM: {e}\n–û—Ç–≤–µ—Ç:\n{raw}")
        return
    
    day_plan = data.get("day_plan", "(–Ω–µ—Ç)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await save_day_plan(session, user.user_id, day_plan)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è", callback_data="improve_schedule")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    
    await query.message.reply_text(
        f"üìÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è:\n\n{day_plan}",
        reply_markup=keyboard
    )

async def cb_improve_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–ª—É—á—à–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=query.from_user.full_name)
        metrics = await get_user_metrics(session, user.user_id)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    rows = []
    for m in metrics[:120]:
        rows.append({
            "timestamp": m.timestamp,
            "cognitive_score": m.cognitive_score,
            "focus": m.focus,
            "chill": m.chill,
            "stress": m.stress,
            "self_control": m.self_control,
            "anger": m.anger,
            "relaxation_index": m.relaxation_index,
            "concentration_index": m.concentration_index,
            "fatique_score": m.fatique_score,
            "reverse_fatique": m.reverse_fatique,
            "alpha_gravity": m.alpha_gravity,
            "heart_rate": m.heart_rate,
        })
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç LLM
    prompt = build_prompt_for_llm(
        user_name=query.from_user.full_name, 
        metrics_rows=rows,
        instruction="Return ONLY JSON with key 'improvement_suggestions' (array of strings). Give specific improvement suggestions for the daily schedule."
    )
    
    try:
        raw = await analyze_metrics(prompt)
        data = json.loads(raw)
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ LLM: {e}\n–û—Ç–≤–µ—Ç:\n{raw}")
        return
    
    tips = data.get("improvement_suggestions", []) or []
    
    if tips:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ –ë–î
        async with AsyncSessionLocal() as session:
            await save_improvement_suggestions(session, user.user_id, tips)
        
        text = "üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∂–∏–º–∞ –¥–Ω—è:\n\n" + "\n".join(f"‚Ä¢ {t}" for t in tips)
    else:
        text = "–°–æ–≤–µ—Ç–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–µ—Ç."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    
    await query.message.reply_text(text, reply_markup=keyboard)

async def cb_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)'"""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    tg_id = query.from_user.id
    user_states[tg_id] = "welcome"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–í–≤–µ–¥–∏ —Å–≤–æ–∏ IAF", callback_data="input_iaf")]
    ])
    
    await query.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥—ã—Ö–∞",
        reply_markup=keyboard
    )

def main():
    app = Application.builder().token(settings.BOT_TOKEN).build()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(cb_input_iaf, pattern="^input_iaf$"))
    app.add_handler(CallbackQueryHandler(cb_upload_file, pattern="^upload_file$"))
    app.add_handler(CallbackQueryHandler(cb_download_csv, pattern="^download_csv$"))
    app.add_handler(CallbackQueryHandler(cb_get_recommendations, pattern="^get_recommendations$"))
    app.add_handler(CallbackQueryHandler(cb_improve_schedule, pattern="^improve_schedule$"))
    app.add_handler(CallbackQueryHandler(cb_restart, pattern="^restart$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_iaf_input))
    app.add_handler(MessageHandler(filters.Document.ALL, on_document))
    
    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()
