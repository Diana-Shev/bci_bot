#—ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥ –±–æ—Ç–∞. –û–Ω –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ñ–∞–π–ª, –ø–∞—Ä—Å–∏—Ç, —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î, –≤—ã–∑—ã–≤–∞–µ—Ç LLM (–∏–ª–∏ –º–æ–∫) –∏ –æ—Ç–¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
import json
from pathlib import Path
from datetime import datetime
import pandas as pd
import aiohttp # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç aiohttp
import re # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç re –¥–ª—è safe_json_loads

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
)

import re


def safe_json_loads(raw: str):
    """
    –ü–æ–ø—ã—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç json.JSONDecodeError.
    """
    cleaned = raw.strip()

    # —É–±–∏—Ä–∞–µ–º markdown-–±–ª–æ–∫–∏ ```json ... ```
    if cleaned.startswith("```json"):
        cleaned = cleaned[7:]
    if cleaned.startswith("```"):
        cleaned = cleaned[3:]
    if cleaned.endswith("```"):
        cleaned = cleaned[:-3]

    cleaned = cleaned.strip()

    # –≤—ã—Ä–µ–∑–∞–µ–º –æ—Ç –ø–µ—Ä–≤–æ–π { –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π }
    start = cleaned.find("{")
    end = cleaned.rfind("}")
    if start != -1 and end != -1:
        cleaned = cleaned[start:end+1]
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞—á–∞–ª–æ/–∫–æ–Ω–µ—Ü JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
        # –∏–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è
        raise json.JSONDecodeError("JSON object not found", raw, 0)

    # –£–¥–∞–ª—è–µ–º —Ç—Ä–æ–µ—Ç–æ—á–∏—è '...' –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ –≤—Å—Ç–∞–≤–ª—è—é—Ç—Å—è LLM –ø—Ä–∏ –æ–±—Ä–µ–∑–∫–µ –æ—Ç–≤–µ—Ç–∞
    cleaned = re.sub(r"\.{2,5}", "", cleaned) # –£–¥–∞–ª—è–µ–º –æ—Ç 2 –¥–æ 5 —Ç–æ—á–µ–∫, —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å '...', '....', '.....'

    # –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å
    try:
        return json.loads(cleaned)
    except json.JSONDecodeError:
        pass

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º —á–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏: –≤–∏—Å—è—â–∏–µ –∫–∞–≤—ã—á–∫–∏, –ª–∏—à–Ω–∏–µ –∑–∞–ø—è—Ç—ã–µ
    fixed = re.sub(r",\s*([}\]])", r"\1", cleaned)  # —É–±–∏—Ä–∞–µ–º –∑–∞–ø—è—Ç—É—é –ø–µ—Ä–µ–¥ } –∏–ª–∏ ]
    fixed = fixed.replace('\\"', '"')  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ escape
    # —É–º–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Üí –æ–±—ã—á–Ω—ã–µ
    fixed = fixed.replace('‚Äú', '"').replace('‚Äù', '"').replace('¬´', '"').replace('¬ª', '"')
    fixed = fixed.replace("'", '"')  # –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ ‚Üí –¥–≤–æ–π–Ω—ã–µ

    # –£–¥–∞–ª—è–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–∫—Ä—ã—Ç—å –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞—Ç—å —Å–∫–æ–±–∫–∏

    # –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
    return json.loads(fixed)


def format_full_report_json(json_text):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON-–æ—Ç–≤–µ—Ç –æ—Ç LLM –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç.
    –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å.
    """
    try:
        data = json.loads(json_text)
    except Exception:
        return json_text  # –µ—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –∫–∞–∫ –µ—Å—Ç—å

    lines = []
    if "productivity_periods" in data:
        lines.append("–ü–µ—Ä–∏–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
        for p in data["productivity_periods"]:
            lines.append(f"- {p['start_time']}‚Äì{p['end_time']}: {p['recommended_activity']}")
        lines.append("")

    if "recovery_periods" in data:
        lines.append("–ü–µ—Ä–∏–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è:")
        for p in data["recovery_periods"]:
            lines.append(f"- {p['start_time']}‚Äì{p['end_time']}: {p['recommended_activity']}")
        lines.append("")

    if "critical_alert_periods" in data:
        lines.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø–µ—Ä–∏–æ–¥—ã:")
        for p in data["critical_alert_periods"]:
            lines.append(f"- {p['start_time']}‚Äì{p['end_time']}: {p['issue']} (—É—Ä–æ–≤–µ–Ω—å: {p['alert_level']})")
        lines.append("")

    if "optimal_rest_times" in data:
        lines.append("–û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–¥—ã—Ö–∞:")
        for p in data["optimal_rest_times"]:
            acts = ', '.join(p.get('activities', []))
            lines.append(f"- {p['time']} ({p['type']}): {acts}")
        lines.append("")

    if "day_plan" in data:
        lines.append("–ü–ª–∞–Ω –¥–Ω—è:")
        lines.append(data["day_plan"])
        lines.append("")

    if "improvement_suggestions" in data:
        lines.append("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:")
        for s in data["improvement_suggestions"]:
            lines.append(f"- {s}")
        lines.append("")

    return "\n".join(lines)


from .config import settings
from .database import AsyncSessionLocal
from .crud import (
    get_or_create_user, save_metrics_bulk, save_productivity_periods,
    get_productivity_periods, get_user_metrics, save_day_plan, save_improvement_suggestions,
    update_user_iaf
)
from .utils import parse_metrics_file, build_prompt_for_llm
from .llm_client import analyze_metrics, chat_with_llm

DOWNLOAD_DIR = Path(settings.DOWNLOADS_DIR)
DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç–∫—Ä–∞–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"""
    tg_id = update.effective_user.id
    name = update.effective_user.full_name
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await get_or_create_user(session, telegram_id=tg_id, name=name)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_states[tg_id] = "welcome"
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ IAF", callback_data="input_iaf")],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ai-neiry", callback_data="ask_question")]
    ])
    
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, BCI/–≠–≠–ì –¥–∞–Ω–Ω—ã–º, –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞–º –∏ —Ç.–¥., "
        "–∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –º–µ—Ç—Ä–∏–∫.",
        reply_markup=keyboard
    )

async def cb_input_iaf(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–í–≤–µ–¥–∏ —Å–≤–æ–∏ IAF'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    user_states[tg_id] = "waiting_iaf"
    
    # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∫–∞–∑–∞–ª–æ—Å—å, —á—Ç–æ –æ—Ç–≤–µ—Ç —É–¥–∞–ª–∏–ª—Å—è
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass
    await context.bot.send_message(
        chat_id=tg_id,
        text=(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∞–ª—å—Ñ–∞-—á–∞—Å—Ç–æ—Ç—É (IAF) –≤ –ì—Ü.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 10.5 –∏–ª–∏ 11.2\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —á–∏—Å–ª–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        )
    )

async def cb_ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ai-neiry'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    user_states[tg_id] = "waiting_question"
    
    # –ù–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –ø—Ä–æ—à–ª—ã–µ –æ—Ç–≤–µ—Ç—ã ‚Äî –æ—á–∏—â–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ —à–ª—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await query.edit_message_reply_markup(reply_markup=None)
    except Exception:
        pass
    await context.bot.send_message(
        chat_id=tg_id,
        text=(
            "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, BCI/–≠–≠–ì –¥–∞–Ω–Ω—ã–º, –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞–º, "
            "–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Å—Ç—Ä–µ—Å—Å—É, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏ –¥—Ä—É–≥–∏–º —Ç–µ–º–∞–º –≤ —Ä–∞–º–∫–∞—Ö –º–æ–µ–π —ç–∫—Å–ø–µ—Ä—Ç–∏–∑—ã.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏."
        )
    )

async def handle_text_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if not update.message or not update.message.text:
        return
    
    tg_id = update.effective_user.id
    current_state = user_states.get(tg_id)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if current_state == "waiting_question":
        await handle_question_input(update, context)
    elif current_state == "waiting_iaf":
        await handle_iaf_input(update, context)
    # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º

async def handle_question_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ ai-neiry"""
    if not update.message or not update.message.text:
        return
    
    tg_id = update.effective_user.id
    
    question = update.message.text
    name = update.effective_user.full_name
    
    await update.message.reply_text("ü§î –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è Deepseek
    # –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history = context.chat_data.get("history", [])
    if not history:
        history = [
            {"role": "system", "content": (
                "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
                "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π JSON/—Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏/–±–ª–æ–∫–∏ –∫–æ–¥–∞, —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. "
                "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, –≠–≠–ì/BCI, –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞–º, –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Å—Ç—Ä–µ—Å—Å—É, "
                "–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é ‚Äì –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∞–Ω–∞–ª–∏–∑—É –º–µ—Ç—Ä–∏–∫, –ª–∏–±–æ –ø—É—Å—Ç—å –∑–∞–¥–∞—Å—Ç –≤–æ–ø—Ä–æ—Å –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–º—ã." )}
        ]
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    history.append({"role": "user", "content": question})
    
    try:
        answer = await chat_with_llm(history, max_tokens=800, temperature=0.2)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é: –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
        history.append({"role": "assistant", "content": answer})
        context.chat_data["history"] = history[-20:]
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ IAF", callback_data="input_iaf")]
        ])
        
        await update.message.reply_text(f"–û—Ç–≤–µ—Ç ai-neiry:\n\n{answer}", reply_markup=keyboard)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ welcome –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        user_states[tg_id] = "welcome"
        
    except Exception as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –∞–Ω–∞–ª–∏–∑—É –º–µ—Ç—Ä–∏–∫."
        )
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")],
            [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ IAF", callback_data="input_iaf")]
        ])
        await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)

async def handle_iaf_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ IAF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
    if not update.message or not update.message.text:
        return
    
    tg_id = update.effective_user.id
    
    try:
        iaf = float(update.message.text.replace(',', '.'))
        if iaf < 7.0 or iaf > 13.0:
            await update.message.reply_text(
                "IAF –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 7-13 –ì—Ü. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
            )
            return
    except ValueError:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 10.5"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º IAF –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await update_user_iaf(session, tg_id, iaf)
    
    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
    user_states[tg_id] = "ready_for_file"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏", callback_data="upload_file")]
    ])
    
    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–≤–æ–π IAF: {iaf} –ì—Ü\n\n"
        "–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (CSV –∏–ª–∏ XLSX)",
        reply_markup=keyboard
    )

async def cb_upload_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏' –∏–ª–∏ '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    user_states[tg_id] = "waiting_file"
    
    await query.edit_message_text(
        "–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ (CSV –∏–ª–∏ XLSX).\n\n"
        "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏:\n"
        "‚Ä¢ timestamp - –≤—Ä–µ–º—è –∏–∑–º–µ—Ä–µ–Ω–∏—è\n"
        "‚Ä¢ cognitive_score - –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π —Å–∫–æ—Ä\n"
        "‚Ä¢ focus - –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è\n"
        "‚Ä¢ chill - —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ\n"
        "‚Ä¢ stress - —Å—Ç—Ä–µ—Å—Å\n"
        "‚Ä¢ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç—Ä–∏–∫–∏..."
    )

async def on_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not update.message or not update.message.document:
        return
    
    tg_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
    if user_states.get(tg_id) != "waiting_file":
        if not update.message.document.file_name.lower().endswith((".csv", ".xlsx")):
            await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏–ª–∏ XLSX.")
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")]])
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV/XLSX.", reply_markup=keyboard)
        return
    
    doc = update.message.document
    name = update.effective_user.full_name
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not doc.file_name.lower().endswith((".csv", ".xlsx")):
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")]])
        await update.message.reply_text("‚ùå –§–∞–π–ª –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ CSV –∏–ª–∏ XLSX.", reply_markup=keyboard)
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)
    if doc.file_size and doc.file_size > 20 * 1024 * 1024:
        await update.message.reply_text(
            "‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π\n\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 20MB\n"
            f"–†–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞: {doc.file_size / (1024*1024):.1f}MB\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ —á–∞—Å—Ç–∏."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ç–∞–π–º–∞—É—Ç–∞
    saved_path = DOWNLOAD_DIR / f"{tg_id}_{doc.file_name}"
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª {doc.file_name}")
    print(f"DEBUG: –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {doc.file_size}")
    print(f"DEBUG: –ü—É—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {saved_path}")
    
    try:
        await update.message.reply_text("üì• –°–∫–∞—á–∏–≤–∞—é —Ñ–∞–π–ª...")
        file = await doc.get_file()
        file_url = file.file_path # –ü–æ–ª—É—á–∞–µ–º URL —Ñ–∞–π–ª–∞
        
        print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ–±—ä–µ–∫—Ç —Ñ–∞–π–ª–∞: {file}")
        print(f"DEBUG: file_size –æ—Ç doc: {doc.file_size}")
        print(f"DEBUG: URL —Ñ–∞–π–ª–∞: {file_url}")

        async with aiohttp.ClientSession() as session:
            async with session.get(file_url, timeout=300) as response: # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è aiohttp
                response.raise_for_status() # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏ HTTP
                with open(saved_path, "wb") as f:
                    while True:
                        chunk = await response.content.read(1024)
                        if not chunk:
                            break
                        f.write(chunk)
        
        print(f"DEBUG: –§–∞–π–ª —Å–∫–∞—á–∞–Ω —Å –ø–æ–º–æ—â—å—é aiohttp, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞—á–∞–ª—Å—è
        if not saved_path.exists():
            raise Exception("–§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ –¥–∏—Å–∫")
            
        file_size = saved_path.stat().st_size
        print(f"DEBUG: –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç")
        await update.message.reply_text("‚úÖ –§–∞–π–ª —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
    except aiohttp.ClientError as e:
        error_msg = str(e)
        file_size_info = ""
        if doc.file_size:
            file_size_info = f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {doc.file_size / (1024*1024):.1f}MB"
        else:
            file_size_info = "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
        
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ aiohttp\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
            f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
            f"{file_size_info}"
        )
        return
    except Exception as e:
        error_msg = str(e)
        file_size_info = ""
        if doc.file_size:
            file_size_info = f"–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {doc.file_size / (1024*1024):.1f}MB"
        else:
            file_size_info = "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
            
        if "Timed out" in error_msg or "timeout" in error_msg.lower():
            await update.message.reply_text(
                f"‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n\n"
                f"–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∏–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –£–º–µ–Ω—å—à–∏—Ç—å —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–º–∞–∫—Å–∏–º—É–º 20MB)\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
                f"{file_size_info}\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}"
            )
        else:
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ\n"
                f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –º–µ–Ω—å—à–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞\n"
                f"‚Ä¢ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ\n\n"
                f"{file_size_info}\n"
                f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {error_msg}"
            )
        return
    
    await update.message.reply_text("–§–∞–π–ª –ø–æ–ª—É—á–µ–Ω. –ü–∞—Ä—Å—é...")

    try:
        rows, status = parse_metrics_file(str(saved_path))
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
        if status.startswith("file_error"):
            error_msg = status.split(": ", 1)[1] if ": " in status else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
            ])
            await update.message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {error_msg}\n\n"
                f"–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞",
                reply_markup=keyboard
            )
            return
            
        elif status.startswith("incomplete_data"):
            error_msg = status.split(": ", 1)[1] if ": " in status else "–ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª", callback_data="upload_file")]
            ])
            await update.message.reply_text(
                f"‚ö†Ô∏è –ù–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª:\n"
                f"‚Ä¢ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã\n"
                f"‚Ä¢ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏\n\n"
                f"–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
                reply_markup=keyboard
            )
            return
            
        elif status != "success":
            await update.message.reply_text(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {status}")
            return
            
    except Exception as e:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
        ])
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞\n\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {str(e)}\n\n"
            f"–¢–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞",
            reply_markup=keyboard
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –≤ –ë–î
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=name)
        n = await save_metrics_bulk(session, user.user_id, rows)

    await update.message.reply_text(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {n} —Å—Ç—Ä–æ–∫ –º–µ—Ç—Ä–∏–∫. –ó–∞–ø—É—Å–∫–∞—é –∞–Ω–∞–ª–∏–∑...")

    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ —á–µ—Ä–µ–∑ LLM (DeepSeek)
    instruction = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ BCI/–≠–≠–ì –¥–∞–Ω–Ω—ã—Ö. 
–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–ë–∞–∑–∞–Ω–æ–≤–æ–π –û–ª—å–≥–∏ –ú–∏—Ö–∞–π–ª–æ–≤–Ω—ã, Pfurtscheller, Klimesch –∏ –¥—Ä.) 
–¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª, —Ñ–æ–∫—É—Å, —Å—Ç—Ä–µ—Å—Å, —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å, 
–∏–Ω–¥–µ–∫—Å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –æ–±—Ä–∞—Ç–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞–ª—å—Ñ–∞-–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è, –ß–°–°) 
—Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞(–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)).

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
2. –í–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º, —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ JSON.
3. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–∑–∞–≥–ª–∞–≤–ª–µ–Ω, –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –Ω–µ –∑–∞–∫–ª—é—á–∞–π –æ—Ç–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ –±–ª–æ–∫–∏.
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –¥–∞—Ç—ã).
6. –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–∞—É—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–∏—è–Ω–∏–µ –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞ –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ).
7. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö.
8. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç—á–µ—Ç –∫–∞–∫: "–ü–µ—Ä–∏–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", "–ü–ª–∞–Ω –¥–Ω—è:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã:" - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –æ—Ç—á–µ—Ç—É, –Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.
"""



    # –ü–µ—Ä–µ–¥–∞—ë–º IAF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –≤ –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    iaf_value = None
    try:
        iaf_value = float(user.iaf) if getattr(user, "iaf", None) is not None else None
    except Exception:
        iaf_value = None

    prompt = build_prompt_for_llm(
        user_name=name,
        metrics_rows=rows,
        instruction=instruction,
        iaf_hz=iaf_value
    )

    try:
        raw = await analyze_metrics(prompt)
        

        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_raw = raw.strip()
        
        # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
        if cleaned_raw.startswith("```json"):
            cleaned_raw = cleaned_raw[7:]  # —É–±–∏—Ä–∞–µ–º ```json
        if cleaned_raw.startswith("```"):
            cleaned_raw = cleaned_raw[3:]   # —É–±–∏—Ä–∞–µ–º ```
        if cleaned_raw.endswith("```"):
            cleaned_raw = cleaned_raw[:-3]  # —É–±–∏—Ä–∞–µ–º ```
        
        cleaned_raw = cleaned_raw.strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        if not cleaned_raw.startswith("{"):
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            start_idx = cleaned_raw.find("{")
            if start_idx != -1:
                cleaned_raw = cleaned_raw[start_idx:]
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        if not cleaned_raw.endswith("}"):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            end_idx = cleaned_raw.rfind("}")
            if end_idx != -1:
                cleaned_raw = cleaned_raw[:end_idx + 1]
        
        data = safe_json_loads(raw) # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_json_loads
    except json.JSONDecodeError as e:
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –º–æ–¥–µ–ª–∏\n\n"
            f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑.\n\n"
            f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{raw[:500]}...\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return
    except Exception as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è raw, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        err_text = str(e)
        try:
            fallback = raw  # –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
        except Exception:
            fallback = "<–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏>"
        await update.message.reply_text(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ—Ä–µ–∑ LLM. "
            + ("\n–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n" + str(fallback) if fallback else "")
            + ("\n–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: " + err_text if err_text else "")
        )
        return

    periods = data.get("productivity_periods", []) or []
    day_plan = data.get("day_plan", "") or ""
    suggestions = data.get("improvement_suggestions", []) or []

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–∏–æ–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –ë–î
    async with AsyncSessionLocal() as session:
        await save_productivity_periods(session, user.user_id, periods)

    # –ú–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    user_states[tg_id] = "analysis_complete"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–µ–≤—å—é (CSV)", callback_data="download_csv")],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è", callback_data="get_recommendations")],
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="get_full_report")], # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])

    preview = "\n".join([f"{p.get('start_time','?')}‚Äì{p.get('end_time','?')}: {p.get('recommended_activity','')}" for p in periods[:5]]) or "LLM –Ω–µ –Ω–∞—à—ë–ª —è–≤–Ω—ã—Ö –ø–µ—Ä–∏–æ–¥–æ–≤."
    msg = f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –ù–∞–π–¥–µ–Ω–æ {len(periods)} –ø–µ—Ä–∏–æ–¥–æ–≤.\n\n–ü—Ä–µ–≤—å—é:\n{preview}"
    if day_plan:
        msg += f"\n\n–ü–ª–∞–Ω –¥–Ω—è:\n{day_plan}"
    if suggestions:
        msg += "\n\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã:\n- " + "\n- ".join(suggestions[:3])

    # –ü–æ—Å–ª–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π msg (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è):
    user_states[tg_id] = {
        "state": "analysis_complete",
        "last_report": msg  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –≤—ã–≥—Ä—É–∑–∫–∏
    }
    await update.message.reply_text(msg, reply_markup=keyboard)

async def cb_get_full_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç'"""
    query = update.callback_query
    await query.answer()

    tg_id = query.from_user.id
    name = query.from_user.full_name

    await query.edit_message_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç...")

    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=name)
        metrics = await get_user_metrics(session, user.user_id)

    if not metrics:
        await query.edit_message_text("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞.")
        return

    rows = []
    for m in metrics[:120]: # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–∏–∫ –¥–ª—è LLM
        rows.append({
            "timestamp": m.timestamp,
            "cognitive_score": m.cognitive_score,
            "focus": m.focus,
            "chill": m.chill,
            "stress": m.stress,
            "self_control": m.self_control,
            "anger": m.anger,
            "relaxation_index": m.relaxation_index,
            "concentration_index": m.concentration_index,
            "fatique_score": m.fatique_score,
            "reverse_fatique": m.reverse_fatique,
            "alpha_gravity": m.alpha_gravity,
            "heart_rate": m.heart_rate,
        })

    instruction = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ –∏ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ BCI/–≠–≠–ì –¥–∞–Ω–Ω—ã—Ö.
–ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥—Ö–æ–¥—ã –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω–æ–π –º–µ–¥–∏—Ü–∏–Ω—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π (–ë–∞–∑–∞–Ω–æ–≤–æ–π –û–ª—å–≥–∏ –ú–∏—Ö–∞–π–ª–æ–≤–Ω—ã, Pfurtscheller, Klimesch –∏ –¥—Ä.) –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è.

–ó–∞–¥–∞—á–∞: –ø—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (–∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã–π –±–∞–ª–ª, —Ñ–æ–∫—É—Å, —Å—Ç—Ä–µ—Å—Å, —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å, –∏–Ω–¥–µ–∫—Å —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏, –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–ª–æ—Å—Ç—å, –æ–±—Ä–∞—Ç–Ω–∞—è —É—Å—Ç–∞–ª–æ—Å—Ç—å, –∞–ª—å—Ñ–∞-–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—è, –ß–°–°) —Å —É—á—ë—Ç–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞(–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)).

‚ö†Ô∏è –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É:
1. –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –°–¢–†–û–ì–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
2. –í–µ—Ä–Ω–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º, —Å –∞–±–∑–∞—Ü–∞–º–∏ –∏ —Å–ø–∏—Å–∫–∞–º–∏, –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ JSON.
3. –ö–∞–∂–¥—ã–π —Ä–∞–∑–¥–µ–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–∑–∞–≥–ª–∞–≤–ª–µ–Ω, –≤–Ω—É—Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π –∞–±–∑–∞—Ü—ã –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–ª–∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ø–∏—Å–∫–∏.
4. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞, –Ω–µ –∑–∞–∫–ª—é—á–∞–π –æ—Ç–≤–µ—Ç –≤ –∫–∞–≤—ã—á–∫–∏ –∏–ª–∏ –±–ª–æ–∫–∏.
5. –ò—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–∏–≤–æ–¥–∏ —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –¥–∞—Ç—ã).
6. –û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º, —Å –ø–æ—è—Å–Ω–µ–Ω–∏—è–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –Ω–∞—É—á–Ω—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–ª–∏—è–Ω–∏–µ –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞ –Ω–∞ –≤–Ω–∏–º–∞–Ω–∏–µ).
7. –ò–∑–±–µ–≥–∞–π –æ–±—â–∏—Ö —Ñ—Ä–∞–∑, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö.
8. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç—á–µ—Ç –∫–∞–∫: "–ü–µ—Ä–∏–æ–¥—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:", "–ü–ª–∞–Ω –¥–Ω—è:", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ —Å–æ–≤–µ—Ç—ã:" - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–º—É –æ—Ç—á–µ—Ç—É, –Ω–æ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è–º–∏.
"""

    iaf_value = None
    try:
        iaf_value = float(user.iaf) if getattr(user, "iaf", None) is not None else None
    except Exception:
        iaf_value = None

    prompt = build_prompt_for_llm(
        user_name=name,
        metrics_rows=rows,
        instruction=instruction,
        iaf_hz=iaf_value
    )

    try:
        full_report_text = await chat_with_llm([{"role": "user", "content": prompt}], max_tokens=1200, temperature=0.2)
        await query.message.reply_text(f"–í–æ—Ç –≤–∞—à –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç:\n\n{full_report_text}")
    except Exception as e:
        await query.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {str(e)}")

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è", callback_data="get_recommendations")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    await query.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=keyboard)


async def cb_download_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ –∏–∑ user_states (–æ–Ω –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞)
    report_text = None
    if tg_id in user_states and isinstance(user_states[tg_id], dict):
        report_text = user_states[tg_id].get("last_report")

    # –ï—Å–ª–∏ –æ—Ç—á–µ—Ç–∞ –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
    if not report_text:
        await query.edit_message_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ —Å–Ω–∞—á–∞–ª–∞.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º CSV-—Ñ–∞–π–ª, –≥–¥–µ –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ç—Ä–æ–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    out_path = DOWNLOAD_DIR / f"{tg_id}_report.csv"
    import csv
    with open(out_path, "w", encoding="cp1251", newline="") as f:
        writer = csv.writer(f)
        writer.writerow(["–û—Ç—á–µ—Ç"])
        for line in report_text.splitlines():
            writer.writerow([line])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        with open(out_path, "rb") as f:
            await context.bot.send_document(chat_id=tg_id, document=f)
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å CSV —Ñ–∞–π–ª.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è", callback_data="get_recommendations")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])

    await query.message.reply_text(
        "–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è.",
        reply_markup=keyboard
    )

async def cb_get_recommendations(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=query.from_user.full_name)
        metrics = await get_user_metrics(session, user.user_id)
    
    if not metrics:
        await query.edit_message_text("–ù–µ—Ç –º–µ—Ç—Ä–∏–∫. –ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª —Å–Ω–∞—á–∞–ª–∞.")
        return
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    rows = []
    for m in metrics[:120]:
        rows.append({
            "timestamp": m.timestamp,
            "cognitive_score": m.cognitive_score,
            "focus": m.focus,
            "chill": m.chill,
            "stress": m.stress,
            "self_control": m.self_control,
            "anger": m.anger,
            "relaxation_index": m.relaxation_index,
            "concentration_index": m.concentration_index,
            "fatique_score": m.fatique_score,
            "reverse_fatique": m.reverse_fatique,
            "alpha_gravity": m.alpha_gravity,
            "heart_rate": m.heart_rate,
        })
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Ç LLM
    # –î–æ–±–∞–≤–∏–º IAF –≤ –ø—Ä–æ–º–ø—Ç
    iaf_value = None
    try:
        iaf_value = float(user.iaf) if getattr(user, "iaf", None) is not None else None
    except Exception:
        iaf_value = None

    prompt = build_prompt_for_llm(
        user_name=query.from_user.full_name, 
        metrics_rows=rows,
        instruction = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏ —á–µ–ª–æ–≤–µ–∫–∞. 
–ò—Å–ø–æ–ª—å–∑—É—è –∞–Ω–∞–ª–∏–∑ BCI/–≠–≠–ì-–º–µ—Ç—Ä–∏–∫ –∏ –∑–Ω–∞–Ω–∏—è –æ —Ü–∏—Ä–∫–∞–¥–Ω—ã—Ö —Ä–∏—Ç–º–∞—Ö, —Å–æ—Å—Ç–∞–≤—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–Ω—è (day_plan). –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–í —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å:
- –ß–∞—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á).
- –í—Ä–µ–º–µ–Ω–∞ –æ—Ç–¥—ã—Ö–∞/—Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏.
- –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–Ω–∞.

–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –≤ JSON —Å –∫–ª—é—á–æ–º "day_plan". JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º –∏ –≤–∞–ª–∏–¥–Ω—ã–º.
–ü—Ä–∏–º–µ—Ä JSON:
```json
{"day_plan": "1. –£—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ–¥—ä–µ–º (7:00-7:30): –õ–µ–≥–∫–∞—è –∑–∞—Ä—è–¥–∫–∞, –º–µ–¥–∏—Ç–∞—Ü–∏—è. 2. –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (9:00-12:00): –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏..."}
```
"""
    , iaf_hz=iaf_value)
    
    try:
        raw = await analyze_metrics(prompt)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_raw = raw.strip()
        
        # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
        if cleaned_raw.startswith("```json"):
            cleaned_raw = cleaned_raw[7:]  # —É–±–∏—Ä–∞–µ–º ```json
        if cleaned_raw.startswith("```"):
            cleaned_raw = cleaned_raw[3:]   # —É–±–∏—Ä–∞–µ–º ```
        if cleaned_raw.endswith("```"):
            cleaned_raw = cleaned_raw[:-3]  # —É–±–∏—Ä–∞–µ–º ```
        
        cleaned_raw = cleaned_raw.strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        if not cleaned_raw.startswith("{"):
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            start_idx = cleaned_raw.find("{")
            if start_idx != -1:
                cleaned_raw = cleaned_raw[start_idx:]
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        if not cleaned_raw.endswith("}"):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            end_idx = cleaned_raw.rfind("}")
            if end_idx != -1:
                cleaned_raw = cleaned_raw[:end_idx + 1]
        
        data = safe_json_loads(raw) # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_json_loads
    except json.JSONDecodeError as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –º–æ–¥–µ–ª–∏\n\n"
            f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑.\n\n"
            f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{raw[:500]}...\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ LLM: {e}\n–û—Ç–≤–µ—Ç:\n{raw}")
        return
    
    day_plan = data.get("day_plan", "(–Ω–µ—Ç)")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ –ë–î
    try:
        async with AsyncSessionLocal() as session:
            await save_day_plan(session, user.user_id, day_plan)
    except Exception as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–£–ª—É—á—à–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è", callback_data="improve_schedule")],
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    
    await query.message.reply_text(
        f"üìÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–µ–∂–∏–º—É –¥–Ω—è:\n\n{day_plan}",
        reply_markup=keyboard
    )

async def cb_improve_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–£–ª—É—á—à–∏—Ç—å —Ä–µ–∂–∏–º –¥–Ω—è'"""
    query = update.callback_query
    await query.answer()
    
    tg_id = query.from_user.id
    
    async with AsyncSessionLocal() as session:
        user = await get_or_create_user(session, telegram_id=tg_id, name=query.from_user.full_name)
        metrics = await get_user_metrics(session, user.user_id)
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è LLM
    rows = []
    for m in metrics[:120]:
        rows.append({
            "timestamp": m.timestamp,
            "cognitive_score": m.cognitive_score,
            "focus": m.focus,
            "chill": m.chill,
            "stress": m.stress,
            "self_control": m.self_control,
            "anger": m.anger,
            "relaxation_index": m.relaxation_index,
            "concentration_index": m.concentration_index,
            "fatique_score": m.fatique_score,
            "reverse_fatique": m.reverse_fatique,
            "alpha_gravity": m.alpha_gravity,
            "heart_rate": m.heart_rate,
        })
    
    # –ü–æ–ª—É—á–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç LLM
    iaf_value = None
    try:
        iaf_value = float(user.iaf) if getattr(user, "iaf", None) is not None else None
    except Exception:
        iaf_value = None

    prompt = build_prompt_for_llm(
        user_name=query.from_user.full_name, 
        metrics_rows=rows,
        instruction = """
–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ–ø—Å–∏—Ö–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏. 
–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–≥–Ω–∏—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∂–∏–º–∞ –¥–Ω—è. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. 
–§–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
- –¢–æ—á–µ—á–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö, –ø–æ–≤—ã—à–∞—é—â–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å.
- –°–Ω–∏–∂–µ–Ω–∏–µ —É—Ç–æ–º–ª—è–µ–º–æ—Å—Ç–∏.
- –ú–µ—Ç–æ–¥—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤.

–û—Ç–≤–µ—Ç –≤–µ—Ä–Ω–∏ –°–¢–†–û–ì–û –≤ JSON —Å –∫–ª—é—á–æ–º "improvement_suggestions" (–º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫). JSON –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–Ω—ã–º –∏ –≤–∞–ª–∏–¥–Ω—ã–º.
–ü—Ä–∏–º–µ—Ä JSON:
```json
{"improvement_suggestions": ["1. –£–≤–µ–ª–∏—á—å—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–Ω–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç.", "2. –í–∫–ª—é—á–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –≤ —Ä–∞–±–æ—Ç—É..."]}
```
"""
    , iaf_hz=iaf_value)
    
    try:
        raw = await analyze_metrics(prompt)
        
        # –û—á–∏—â–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cleaned_raw = raw.strip()
        
        # –£–±–∏—Ä–∞–µ–º markdown –±–ª–æ–∫–∏ ```json –∏ ```
        if cleaned_raw.startswith("```json"):
            cleaned_raw = cleaned_raw[7:]  # —É–±–∏—Ä–∞–µ–º ```json
        if cleaned_raw.startswith("```"):
            cleaned_raw = cleaned_raw[3:]   # —É–±–∏—Ä–∞–µ–º ```
        if cleaned_raw.endswith("```"):
            cleaned_raw = cleaned_raw[:-3]  # —É–±–∏—Ä–∞–µ–º ```
        
        cleaned_raw = cleaned_raw.strip()
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ - —É–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –Ω–∞—á–∞–ª–µ
        if not cleaned_raw.startswith("{"):
            # –ò—â–µ–º –ø–µ—Ä–≤—É—é –æ—Ç–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            start_idx = cleaned_raw.find("{")
            if start_idx != -1:
                cleaned_raw = cleaned_raw[start_idx:]
        
        # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –≤ –∫–æ–Ω—Ü–µ
        if not cleaned_raw.endswith("}"):
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É
            end_idx = cleaned_raw.rfind("}")
            if end_idx != -1:
                cleaned_raw = cleaned_raw[:end_idx + 1]
        
        data = safe_json_loads(raw) # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_json_loads
    except json.JSONDecodeError as e:
        await query.edit_message_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç –º–æ–¥–µ–ª–∏\n\n"
            f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON.\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –µ—â–µ —Ä–∞–∑.\n\n"
            f"–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:\n{raw[:500]}...\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}"
        )
        return
    except Exception as e:
        await query.edit_message_text(f"–û—à–∏–±–∫–∞ LLM: {e}\n–û—Ç–≤–µ—Ç:\n{raw}")
        return
    
    tips = data.get("improvement_suggestions", []) or []
    
    if tips:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ª—É—á—à–µ–Ω–∏—è –≤ –ë–î
        try:
            async with AsyncSessionLocal() as session:
                await save_improvement_suggestions(session, user.user_id, tips)
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö\n\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–≤–µ—Ç—ã.\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.\n\n"
                f"–û—à–∏–±–∫–∞: {str(e)}"
            )
            return
        
        text = "üí° –°–æ–≤–µ—Ç—ã –ø–æ —É–ª—É—á—à–µ–Ω–∏—é —Ä–µ–∂–∏–º–∞ –¥–Ω—è:\n\n" + "\n".join(f"‚Ä¢ {t}" for t in tips)
    else:
        text = "–°–æ–≤–µ—Ç–æ–≤ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –Ω–µ—Ç."
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üîÑ Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)", callback_data="restart")]
    ])
    
    await query.message.reply_text(text, reply_markup=keyboard)

async def cb_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ 'Start (–ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–∞—á–∞–ª–æ)'"""
    query = update.callback_query
    await query.answer()
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—á–∞–ª—É
    tg_id = query.from_user.id
    user_states[tg_id] = "welcome"
    
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ IAF", callback_data="input_iaf")],
        [InlineKeyboardButton("–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ai-neiry", callback_data="ask_question")]
    ])
    
    await query.edit_message_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Å–æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ–±—è –≤—Ä–µ–º—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –æ—Ç–¥—ã—Ö–∞\n\n"
        "–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –Ω–µ–π—Ä–æ—Ñ–∏–∑–∏–æ–ª–æ–≥–∏–∏, BCI/–≠–≠–ì –¥–∞–Ω–Ω—ã–º, –∞–ª—å—Ñ–∞-—Ä–∏—Ç–º–∞–º –∏ —Ç.–¥., "
        "–∏–ª–∏ —Å—Ä–∞–∑—É –Ω–∞—á–∞—Ç—å –∞–Ω–∞–ª–∏–∑ —Å–≤–æ–∏—Ö –º–µ—Ç—Ä–∏–∫.",
        reply_markup=keyboard
    )

def main():
    app = Application.builder().token(settings.BOT_TOKEN).build()
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    app.bot.request.timeout = 300  # 5 –º–∏–Ω—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö —Ñ–∞–π–ª–æ–≤
    app.bot.request.connect_timeout = 60  # 1 –º–∏–Ω—É—Ç–∞ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    app.add_handler(CommandHandler("start", cmd_start))
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    async def db_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
        from .database import AsyncSessionLocal
        from .models import User, Metric, ProductivityPeriod, DailyRecommendation, ImprovementSuggestion
        async with AsyncSessionLocal() as session:
            from sqlalchemy import func
            u = (await session.execute(func.count(User.user_id))).scalar()
            m = (await session.execute(func.count(Metric.id))).scalar()
            p = (await session.execute(func.count(ProductivityPeriod.id))).scalar()
            d = (await session.execute(func.count(DailyRecommendation.id))).scalar()
            i = (await session.execute(func.count(ImprovementSuggestion.id))).scalar()
        await update.message.reply_text(
            f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–î:\nUsers: {u}\nMetrics: {m}\nProductivityPeriods: {p}\nDailyRecommendations: {d}\nImprovementSuggestions: {i}"
        )
    app.add_handler(CommandHandler("db_stats", db_stats))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(CallbackQueryHandler(cb_input_iaf, pattern="^input_iaf$"))
    app.add_handler(CallbackQueryHandler(cb_ask_question, pattern="^ask_question$"))
    app.add_handler(CallbackQueryHandler(cb_upload_file, pattern="^upload_file$"))
    app.add_handler(CallbackQueryHandler(cb_download_csv, pattern="^download_csv$"))
    app.add_handler(CallbackQueryHandler(cb_get_recommendations, pattern="^get_recommendations$"))
    app.add_handler(CallbackQueryHandler(cb_improve_schedule, pattern="^improve_schedule$"))
    app.add_handler(CallbackQueryHandler(cb_get_full_report, pattern="^get_full_report$")) # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    app.add_handler(CallbackQueryHandler(cb_restart, pattern="^restart$"))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–∞–∂–µ–Ω –ø–æ—Ä—è–¥–æ–∫!)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_input))
    app.add_handler(MessageHandler(filters.Document.ALL, on_document))
    
    print("Bot is running...")
    app.run_polling()

if __name__ == "__main__":
    main()

