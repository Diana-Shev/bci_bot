#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def test_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –º–æ–¥—É–ª–µ–π"""
    try:
        from app.models import User, Metric, ProductivityPeriod, DailyRecommendation, ImprovementSuggestion
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π —É—Å–ø–µ—à–µ–Ω")
        
        from app.config import settings
        print("‚úÖ –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–µ–Ω")
        
        from app.crud import get_or_create_user, save_metrics_bulk, save_productivity_periods
        print("‚úÖ –ò–º–ø–æ—Ä—Ç CRUD –æ–ø–µ—Ä–∞—Ü–∏–π —É—Å–ø–µ—à–µ–Ω")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False

def test_models():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –º–æ–¥–µ–ª–µ–π"""
    try:
        from app.models import User, Metric, ProductivityPeriod, DailyRecommendation, ImprovementSuggestion
        
        # –¢–µ—Å—Ç User
        user = User(
            telegram_id=12345,
            username="test_user",
            name="Test User",
            email="test@example.com"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å User —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç Metric
        from datetime import datetime
        metric = Metric(
            user_id=1,
            timestamp=datetime.utcnow(),
            cognitive_score=85,
            focus=70,
            chill=30,
            stress=20,
            self_control=60,
            anger=5,
            relaxation_index=0.5,
            concentration_index=0.7,
            fatique_score=0.2,
            reverse_fatique=0.1,
            alpha_gravity=0.3,
            heart_rate=72
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å Metric —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç ProductivityPeriod
        from datetime import time
        period = ProductivityPeriod(
            user_id=1,
            start_time=time(9, 0),
            end_time=time(12, 0),
            productivity_score=90.0,
            recommended_activity="coding"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å ProductivityPeriod —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç DailyRecommendation
        from datetime import date
        rec = DailyRecommendation(
            user_id=1,
            date=date.today(),
            recommendation_text="Test recommendation"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å DailyRecommendation —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç ImprovementSuggestion
        suggestion = ImprovementSuggestion(
            user_id=1,
            suggestion_text="Test suggestion"
        )
        print("‚úÖ –ú–æ–¥–µ–ª—å ImprovementSuggestion —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
        return False

def test_config():
    """–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    try:
        from app.config import settings
        
        print(f"‚úÖ BOT_TOKEN: {settings.BOT_TOKEN}")
        print(f"‚úÖ DATABASE_URL: {settings.DATABASE_URL}")
        print(f"‚úÖ DEEPSEEK_API_KEY: {settings.DEEPSEEK_API_KEY}")
        print(f"‚úÖ DOWNLOADS_DIR: {settings.DOWNLOADS_DIR}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ DATABASE_URL —Å–æ–¥–µ—Ä–∂–∏—Ç asyncpg
        if "asyncpg" in settings.DATABASE_URL:
            print("‚úÖ DATABASE_URL —Å–æ–¥–µ—Ä–∂–∏—Ç asyncpg –¥—Ä–∞–π–≤–µ—Ä")
        else:
            print("‚ö†Ô∏è DATABASE_URL –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç asyncpg –¥—Ä–∞–π–≤–µ—Ä")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False

def test_database_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü)"""
    try:
        from app.database import engine
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç engine —É—Å–ø–µ—à–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ engine —Å–æ–∑–¥–∞–Ω
        if engine:
            print("‚úÖ Engine —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"‚úÖ URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {engine.url}")
            return True
        else:
            print("‚ùå Engine –Ω–µ —Å–æ–∑–¥–∞–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False

def test_crud_functions():
    """–¢–µ—Å—Ç CRUD —Ñ—É–Ω–∫—Ü–∏–π (–±–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤)"""
    try:
        from app.crud import (
            get_or_create_user, 
            save_metrics_bulk, 
            save_productivity_periods,
            save_day_plan,
            save_improvement_suggestions
        )
        
        print("‚úÖ –í—Å–µ CRUD —Ñ—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —è–≤–ª—è—é—Ç—Å—è callable
        functions = [
            get_or_create_user,
            save_metrics_bulk,
            save_productivity_periods,
            save_day_plan,
            save_improvement_suggestions
        ]
        
        for func in functions:
            if callable(func):
                print(f"‚úÖ –§—É–Ω–∫—Ü–∏—è {func.__name__} —è–≤–ª—è–µ—Ç—Å—è callable")
            else:
                print(f"‚ùå –§—É–Ω–∫—Ü–∏—è {func.__name__} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è callable")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ CRUD —Ñ—É–Ω–∫—Ü–∏–π: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 60)
    
    tests = [
        ("–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤", test_imports),
        ("–¢–µ—Å—Ç –º–æ–¥–µ–ª–µ–π", test_models),
        ("–¢–µ—Å—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config),
        ("–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î", test_database_connection),
        ("–¢–µ—Å—Ç CRUD —Ñ—É–Ω–∫—Ü–∏–π", test_crud_functions)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüß™ {test_name}:")
        if test_func():
            passed += 1
        print()
    
    print("=" * 60)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüí° –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
        print("üìù –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥: –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å PostgreSQL")
    else:
        print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print("\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
    
    return 0 if passed == total else 1

if __name__ == "__main__":
    exit(main())
